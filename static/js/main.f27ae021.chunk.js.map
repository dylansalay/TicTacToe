{"version":3,"sources":["board.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","board","Array","fill","turn","xWinCount","oWinCount","statusMessage","e","id","target","_this$state","filter","combo","_combo","slicedToArray","a","b","c","setState","_this2","_this$state2","squares","map","val","index","react_default","createElement","onClick","playerTurn","bind","key","className","restart","Component","App","src_board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f27ae021.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Board extends Component {\n  constructor(props){\n    super(props)\n      this.state = { // Set initial state\n        board: Array(9).fill(\"\"), // Start with a blank game board\n        turn: 0, // No turns have occurred yet\n        xWinCount: 0, // No wins have occurred yet\n        oWinCount: 0, // No wins have occurred yet\n        statusMessage: \"\" // No status message to display yet\n      }\n    }\n\n  // This function contains most of the game's logic\n  playerTurn(e){\n\n    let id = e.target.id // Recognize which game tile is clicked for event\n\n    let { // Deconstruction of this.state objects to be manipulated in playerTurn() function\n      board,\n      turn,\n      xWinCount,\n      oWinCount,\n      statusMessage\n      } = this.state\n\n    let winningArr = [ // Define which array index combinations would constitute a \"win\"\n      [0,1,2],\n      [3,4,5],\n      [6,7,8],\n      [0,3,6],\n      [1,4,7],\n      [2,5,8],\n      [0,4,8],\n      [2,4,6]]\n\n    let winner = winningArr.filter((combo) => { // Look for winning array combinations on game board\n      let [a, b, c] = combo // Create variable\n      if (turn >= 10){ // Detect if the game board has been filled without a win occurring, and stop the game if so\n        return\n      }\n\n      // Determine which player's move it is, and render the game tile accordingly\n      if(board[id] === \"\"){ // Only allow this to occur with unclicked tiles (prevents multiple events on the same tile)\n        turn++ // Advance the game's turn counter\n        if(turn % 2 === 0){ // Recognize when it is Player O's turn\n          board[id] = 'o' // Place an 'O' on corresponding game tile\n        } else { // Recognize when it is Player X's turn\n          board[id] = 'x' // Place an 'X' on corresponding game tile\n        }\n      }\n\n      // Detect if a winning array combo has been satisfied by Player X\n      if ( board[a] === 'x' && board[b] === 'x' && board[c] === 'x' ) {\n        statusMessage = \"X wins!\" // Render message declaring Player X as winner\n        turn = 10 // Prevent additional turns\n        xWinCount++ // Add a win to Player X's counter\n        return combo // Stop game\n\n      // Do the same for Player O\n      } else if ( board[a] === 'o' && board[b] === 'o' && board[c] === 'o' ) {\n        statusMessage = \"O Wins!\"\n        turn = 10\n        oWinCount++\n        return combo\n\n      // Declare a stalemate\n      } else if ( turn === 9 ) {\n        statusMessage = \"Draw!\"\n        return\n      }\n    })\n\n    // Update current state\n    this.setState({\n      board: board,\n      turn: turn,\n      xWinCount: xWinCount,\n      oWinCount: oWinCount,\n      statusMessage: statusMessage\n    })\n  }\n\n  // This resets the game board by creating a new blank array, setting the turn counter back to zero, and clearing the status message\n  restart(){\n    this.setState ({\n      board: Array(9).fill(\"\"),\n      turn: 0,\n      statusMessage: \"\"\n    })\n  }\n\n  // Contents to be displayed on screen\n  render() {\n    let {\n      board,\n      turn,\n      xWinCount,\n      oWinCount,\n      statusMessage\n      } = this.state\n    let squares = this.state.board.map((val, index) => {\n      return  (\n        <div onClick={this.playerTurn.bind(this)} key={index} id={index} className=\"grid_item\">{val}</div>\n      )\n    })\n    return (\n      <div id=\"contents_container\">\n        <div id=\"main_container\">\n          <div id=\"x_score_container\">\n            <p id=\"x_name\">Player X:<br></br><span id=\"x_score\">{xWinCount}</span></p>\n          </div>\n          <div id=\"board_container\">\n            <div className=\"grid_container\">{squares}</div>\n          </div>\n          <div id=\"o_score_container\">\n            <p id=\"o_name\">Player O:<br></br><span id=\"o_score\">{oWinCount}</span></p>\n          </div>\n        </div>\n        <div id=\"bottom_container\">\n          <div id=\"button_container\">\n            <button id=\"restart\" onClick={this.restart.bind(this)}>Restart</button>\n          </div>\n          <div id=\"status\">{statusMessage}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './board.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1 id='header'>Tic-Tac-Toe</h1>\n        <div id='board'>\n          <Board/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}