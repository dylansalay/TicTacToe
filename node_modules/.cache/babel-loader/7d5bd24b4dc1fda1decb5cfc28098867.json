{"ast":null,"code":"import _slicedToArray from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/steven/Documents/Coding/Projects/TicTacToe/src/board.js\";\nimport React, { Component } from 'react';\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  // players choose their own display name\n  // ...they also get to choose their display color...\n  // instead of X and O, just colored dots. players get to choose what color they want to be at the start.\n  // visually, blank spaces would be a small grey dot. once clicked, a space's dot would animate to get bigger and transform to user's chosen color\n  // play the computer? should be an option... just .random the AI placing in a spot...\n  // visually, menu should display:\n  // \"Who's Playing?\" <-- header/title at top of menu\n  // (human outline) vs. (computer image) <-- this indicates 1-player game vs. the AI\n  // (human outline) vs. (human outline) <-- this indicates 2-player game\n  // \"best of '?' series\", you can choose best 2 of 3, best of 5, best of 7, 9, 11, etc.\n  // add \"player 1\" and \"player 2\" areas on the left and right of the game board, have some kind of indicator that highlights whose turn it is (by selecting their side/section and making it glow or something). this section should also record how many total wins each player has. maybe first to 10 wins the game?\n  // to do: make it so the restart button doesn't appear UNLESS game is over\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      turn: 0,\n      statusMessage: \"\",\n      //whoseTurn: \"X\",\n      board: Array(9).fill(\"\"),\n      xWinCount: 0,\n      oWinCount: 0\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"playerTurn\",\n    value: function playerTurn(e) {\n      var _this$state = this.state,\n          board = _this$state.board,\n          turn = _this$state.turn,\n          statusMessage = _this$state.statusMessage,\n          xWinCount = _this$state.xWinCount,\n          oWinCount = _this$state.oWinCount;\n      var winningArr = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n      var winner = winningArr.filter(function (combo) {\n        var _combo = _slicedToArray(combo, 3),\n            a = _combo[0],\n            b = _combo[1],\n            c = _combo[2];\n\n        var id = e.target.id;\n\n        if (board[id] === \"\") {\n          turn++;\n\n          if (turn % 2 === 0) {\n            board[id] = 'O';\n          } else {\n            board[id] = 'X';\n          }\n        }\n\n        if (board[a] === 'X' && board[b] === 'X' && board[c] === 'X') {\n          statusMessage = \"X is Winner\";\n          turn = 10;\n          xWinCount++;\n          return combo;\n        } else if (board[a] === 'O' && board[b] === 'O' && board[c] === 'O') {\n          statusMessage = \"O is Winner\";\n          turn = 10;\n          oWinCount++;\n          return combo;\n        }\n\n        if (turn === 9) {\n          statusMessage = \"Stalemate!\";\n          return;\n        }\n      });\n      this.setState({\n        turn: turn,\n        board: board,\n        statusMessage: statusMessage,\n        xWinCount: xWinCount,\n        oWinCount: oWinCount\n      });\n    }\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      this.setState({\n        turn: 0,\n        statusMessage: \"\",\n        board: Array(9).fill(\"\")\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          statusMessage = _this$state2.statusMessage,\n          xWinCount = _this$state2.xWinCount,\n          oWinCount = _this$state2.oWinCount;\n      var squares = this.state.board.map(function (val, index) {\n        if (statusMessage === \" \") {// dont display restart button\n        } else {// display it\n          }\n\n        return React.createElement(\"div\", {\n          onClick: _this2.playerTurn.bind(_this2),\n          key: index,\n          id: index,\n          className: \"grid-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, val);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, squares)), React.createElement(\"button\", {\n        onClick: this.restart.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Restart\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"X wins: \", xWinCount, \" | O wins:\", oWinCount, statusMessage));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"sources":["/Users/steven/Documents/Coding/Projects/TicTacToe/src/board.js"],"names":["React","Component","Board","props","state","turn","statusMessage","board","Array","fill","xWinCount","oWinCount","e","winningArr","winner","filter","combo","a","b","c","id","target","setState","squares","map","val","index","playerTurn","bind","restart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass Board extends Component {\n\n// players choose their own display name\n// ...they also get to choose their display color...\n// instead of X and O, just colored dots. players get to choose what color they want to be at the start.\n// visually, blank spaces would be a small grey dot. once clicked, a space's dot would animate to get bigger and transform to user's chosen color\n\n// play the computer? should be an option... just .random the AI placing in a spot...\n// visually, menu should display:\n// \"Who's Playing?\" <-- header/title at top of menu\n// (human outline) vs. (computer image) <-- this indicates 1-player game vs. the AI\n// (human outline) vs. (human outline) <-- this indicates 2-player game\n\n// \"best of '?' series\", you can choose best 2 of 3, best of 5, best of 7, 9, 11, etc.\n\n// add \"player 1\" and \"player 2\" areas on the left and right of the game board, have some kind of indicator that highlights whose turn it is (by selecting their side/section and making it glow or something). this section should also record how many total wins each player has. maybe first to 10 wins the game?\n\n// to do: make it so the restart button doesn't appear UNLESS game is over\n\nconstructor(props){\n  super(props)\n  this.state = {\n    turn: 0,\n    statusMessage: \"\",\n    //whoseTurn: \"X\",\n    board: Array(9).fill(\"\"),\n    xWinCount: 0,\n    oWinCount: 0\n  }\n}\n\nplayerTurn(e){\n  let {\n    board,\n    turn,\n    statusMessage,\n    xWinCount,\n    oWinCount\n    } = this.state\n  let winningArr = [\n    [0,1,2],\n    [3,4,5],\n    [6,7,8],\n    [0,3,6],\n    [1,4,7],\n    [2,5,8],\n    [0,4,8],\n    [2,4,6]]\n  let winner = winningArr.filter(combo => {\n  let [a, b, c] = combo\n  let id = e.target.id\n\n  if(board[id] === \"\"){\n    turn++\n    if(turn % 2 === 0){\n      board[id] = 'O'\n    } else {\n      board[id] = 'X'\n    }\n  }\n  if ( board[a] === 'X' && board[b] === 'X' && board[c] === 'X' ) {\n    statusMessage = \"X is Winner\"\n    turn = 10\n    xWinCount++\n    return combo\n  } else if ( board[a] === 'O' && board[b] === 'O' && board[c] === 'O' ) {\n    statusMessage = \"O is Winner\"\n    turn = 10\n    oWinCount++\n    return combo\n  }\n  if (turn === 9) {\n    statusMessage = \"Stalemate!\"\n    return\n  }\n})\n  this.setState({\n    turn: turn,\n    board: board,\n    statusMessage: statusMessage,\n    xWinCount: xWinCount,\n    oWinCount: oWinCount\n  })\n}\n\nrestart(){\n  this.setState ({\n    turn: 0,\n    statusMessage: \"\",\n    board: Array(9).fill(\"\")\n  })\n}\n\nrender() {\n  let {statusMessage, xWinCount, oWinCount} = this.state\n  let squares = this.state.board.map((val, index) => {\n\n  if (statusMessage === \" \") {\n    // dont display restart button\n  } else {\n    // display it\n  }\n\n\n    return  (\n      <div onClick={this.playerTurn.bind(this)} key={index} id={index} className=\"grid-item\">{val}</div>\n\n    )\n  })\n  return (\n      <div>\n        <div className=\"Board\">\n          <div className=\"grid-container\">{squares}</div>\n        </div>\n        <button onClick={this.restart.bind(this)}>Restart</button>\n        <div>X wins: {xWinCount} | O wins:{oWinCount}{statusMessage}</div>\n    </div>\n  );}\n}\n\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}