{"ast":null,"code":"import _slicedToArray from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/steven/Documents/Coding/Projects/TicTacToe/src/board.js\";\nimport React, { Component } from 'react';\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      turn: 0,\n      statusMessage: \"\",\n      board: Array(9).fill(\"\"),\n      xWinCount: 0,\n      oWinCount: 0\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"playerTurn\",\n    value: function playerTurn(e) {\n      var id = e.target.id;\n      var _this$state = this.state,\n          board = _this$state.board,\n          turn = _this$state.turn,\n          statusMessage = _this$state.statusMessage,\n          xWinCount = _this$state.xWinCount,\n          oWinCount = _this$state.oWinCount;\n      var winningArr = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n      var winner = winningArr.filter(function (combo) {\n        var _combo = _slicedToArray(combo, 3),\n            a = _combo[0],\n            b = _combo[1],\n            c = _combo[2];\n\n        if (turn >= 10) {\n          return;\n        }\n\n        if (board[id] === \"\") {\n          turn++;\n\n          if (turn % 2 === 0) {\n            board[id] = '●';\n          } else {\n            board[id] = '◆';\n          }\n        }\n\n        if (board[a] === '◆' && board[b] === '◆' && board[c] === '◆') {\n          statusMessage = \"◆ is Winner\";\n          turn = 10;\n          xWinCount++;\n          return combo;\n        } else if (board[a] === '●' && board[b] === '●' && board[c] === '●') {\n          statusMessage = \"● is Winner\";\n          turn = 10;\n          oWinCount++;\n          return combo;\n        } else if (turn === 9) {\n          statusMessage = \"Stalemate\";\n        }\n      });\n      this.setState({\n        turn: turn,\n        board: board,\n        statusMessage: statusMessage,\n        xWinCount: xWinCount,\n        oWinCount: oWinCount\n      });\n    }\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      this.setState({\n        turn: 0,\n        statusMessage: \"\",\n        board: Array(9).fill(\"\")\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          statusMessage = _this$state2.statusMessage,\n          xWinCount = _this$state2.xWinCount,\n          oWinCount = _this$state2.oWinCount;\n      var squares = this.state.board.map(function (val, index) {\n        if (statusMessage === \"\") {// dont display restart button\n        } else {// display it\n          }\n\n        return React.createElement(\"div\", {\n          onClick: _this2.playerTurn.bind(_this2),\n          key: index,\n          id: index,\n          className: \"grid-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, val);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, squares)), React.createElement(\"button\", {\n        onClick: this.restart.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Restart\"), React.createElement(\"div\", {\n        className: \"winmsg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"X wins: \", xWinCount), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"O wins:\", oWinCount), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, statusMessage)));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"sources":["/Users/steven/Documents/Coding/Projects/TicTacToe/src/board.js"],"names":["React","Component","Board","props","state","turn","statusMessage","board","Array","fill","xWinCount","oWinCount","e","id","target","winningArr","winner","filter","combo","a","b","c","setState","squares","map","val","index","playerTurn","bind","restart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass Board extends Component {\n\nconstructor(props){\n  super(props)\n  this.state = {\n    turn: 0,\n    statusMessage: \"\",\n    board: Array(9).fill(\"\"),\n    xWinCount: 0,\n    oWinCount: 0\n  }\n}\n\nplayerTurn(e){\n  let id = e.target.id\n  let {\n    board,\n    turn,\n    statusMessage,\n    xWinCount,\n    oWinCount\n    } = this.state\n  let winningArr = [\n    [0,1,2],\n    [3,4,5],\n    [6,7,8],\n    [0,3,6],\n    [1,4,7],\n    [2,5,8],\n    [0,4,8],\n    [2,4,6]]\n  let winner = winningArr.filter((combo) => {\n    let [a, b, c] = combo\n    if (turn >= 10){\n    return\n  }\n    if(board[id] === \"\"){\n      turn++\n      if(turn % 2 === 0){\n        board[id] = '●'\n      } else {\n        board[id] = '◆'\n      }\n    }\n    if ( board[a] === '◆' && board[b] === '◆' && board[c] === '◆' ) {\n      statusMessage = \"◆ is Winner\"\n      turn = 10\n      xWinCount++\n      return combo\n    } else if ( board[a] === '●' && board[b] === '●' && board[c] === '●' ) {\n      statusMessage = \"● is Winner\"\n      turn = 10\n      oWinCount++\n      return combo\n    } else if ( turn === 9 ) {\n      statusMessage = \"Stalemate\"\n\n    }\n  })\n  this.setState({\n    turn: turn,\n    board: board,\n    statusMessage: statusMessage,\n    xWinCount: xWinCount,\n    oWinCount: oWinCount\n  })\n}\n\nrestart(){\n  this.setState ({\n    turn: 0,\n    statusMessage: \"\",\n    board: Array(9).fill(\"\")\n  })\n}\n\nrender() {\n  let {\n    statusMessage,\n    xWinCount,\n    oWinCount\n    } = this.state\n  let squares = this.state.board.map((val, index) => {\n    if (statusMessage === \"\") {\n      // dont display restart button\n    } else {\n      // display it\n    }\n    return  (\n      <div onClick={this.playerTurn.bind(this)} key={index} id={index} className=\"grid-item\">{val}</div>\n    )\n  })\n  return (\n      <div>\n        <div className=\"Board\">\n          <div className=\"grid-container\">{squares}</div>\n        </div>\n        <button onClick={this.restart.bind(this)}>Restart</button>\n        <div className=\"winmsg\">\n          <div>X wins: {xWinCount}</div>\n          <br></br>\n          <div>O wins:{oWinCount}</div>\n          <br></br>\n          <div>{statusMessage}</div>\n        </div>\n    </div>\n  );}\n}\n\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}