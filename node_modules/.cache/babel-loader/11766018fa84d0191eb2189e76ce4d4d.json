{"ast":null,"code":"import _slicedToArray from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/steven/Documents/Coding/Projects/TicTacToe/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/steven/Documents/Coding/Projects/TicTacToe/src/board.js\";\nimport React, { Component } from 'react';\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  // instead of X and O, just colored dots. players get to choose what color they want to be at the start.\n  // visually, blank spaces would be a small grey dot. once clicked, a space's dot would animate to get bigger and transform to user's chosen color\n  // play the computer? should be an option... just .random the AI placing in a spot...\n  // \"best of '?' series\", you can choose best 2 of 3, best of 5, best of 7, 9, 11, etc.\n  // add \"player 1\" and \"player 2\" areas on the left and right of the game board, have some kind of indicator that highlights whose turn it is (by selecting their side/section and making it glow or something). this section should also record how many total wins each player has. maybe first to 10 wins the game?\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // need to write method to designate between players turns (X,O)\n\n    _this.state = {\n      turn: 1,\n      winMessage: \"\",\n      //whoseTurn: \"X\",\n      board: [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],\n      xWinCount: 0,\n      oWinCount: 0\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"playerTurn\",\n    value: function playerTurn(e) {\n      var _this$state = this.state,\n          board = _this$state.board,\n          turn = _this$state.turn,\n          winMessage = _this$state.winMessage,\n          xWinCount = _this$state.xWinCount,\n          oWinCount = _this$state.oWinCount; //Update board with player position\n\n      var id = e.target.id;\n\n      if (turn > 10) {\n        return;\n      }\n\n      if (board[id] === \" \") {\n        turn++;\n\n        if (turn % 2 === 0) {\n          board[id] = 'X'; // whoseTurn = \"X\"\n        } else {\n          board[id] = 'O'; // whoseTurn = \"O\"\n        }\n      } //Check for winner\n      //Set up winning possibilities\n\n\n      var winningArr = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; //Iterate over winning combinations?\n\n      var winner = winningArr.filter(function (combo, index, array) {\n        var _combo = _slicedToArray(combo, 3),\n            a = _combo[0],\n            b = _combo[1],\n            c = _combo[2];\n\n        if (board[a] === 'X' && board[b] === 'X' && board[c] === 'X') {\n          winMessage = \"X is Winner\";\n          turn = turn + 5;\n          xWinCount++;\n          return combo;\n        } else if (board[a] === 'O' && board[b] === 'O' && board[c] === 'O') {\n          winMessage = \"O is Winner\";\n          turn = turn + 5;\n          oWinCount++;\n          return combo; // make the below line call a function, that contains .map and is defined earlier in code\n        } else if (board[1] !== \" \" && board[2] !== \" \" && board[3] !== \" \" && board[4] !== \" \" && board[5] !== \" \" && board[6] !== \" \" && board[7] !== \" \" && board[8] !== \" \" && board[9] !== \" \") {\n          winMessage = \"Stalemate!\";\n        }\n      });\n      this.setState({\n        turn: turn,\n        board: board,\n        winMessage: winMessage,\n        xWinCount: xWinCount,\n        oWinCount: oWinCount\n      });\n    }\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      this.setState({\n        turn: 1,\n        winMessage: ' ',\n        board: [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          winMessage = _this$state2.winMessage,\n          xWinCount = _this$state2.xWinCount,\n          oWinCount = _this$state2.oWinCount;\n      var squares = this.state.board.map(function (val, index) {\n        return React.createElement(\"div\", {\n          onClick: _this2.playerTurn.bind(_this2),\n          key: index,\n          id: index,\n          className: \"grid-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, val);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, squares)), React.createElement(\"button\", {\n        onClick: this.restart.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Restart\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"X wins: \", xWinCount, \" | O wins:\", oWinCount, winMessage));\n    } //create 3x3 grid container with grid items\n    // <div class=\"grid-container\">\n    //   <div onClick={this.playerTurn.bind(this)} id = '0' class=\"grid-item\">{this.state.square[0]}</div>\n    //   <div onClick={this.playerTurn.bind(this)} id = '1' class=\"grid- item\">{this.state.square[1]}</div>\n    //   <div onClick={this.playerTurn.bind(this)} id = '2' class=\"grid-item\">{this.state.square[2]}</div>\n    //   <div onClick={this.playerTurn.bind(this)} id = '3' class=\"grid-item\">{this.state.square[3]}</div>\n    //   <div onClick={this.playerTurn.bind(this)} id = '4' class=\"grid-item\">{this.state.square[4]}</div>\n    //   <div onClick={this.playerTurn.bind(this)} id = '5' class=\"grid-item\">{this.state.square[5]}</div>\n    //   <div onClick={this.playerTurn.bind(this)} id = '6' class=\"grid-item\">{this.state.square[6]}</div>\n    //   <div onClick={this.playerTurn.bind(this)} id = '7' class=\"grid-item\">{this.state.square[7]}</div>\n    //   <div onClick={this.playerTurn.bind(this)} id = '8' class=\"grid-item\">{this.state.square[8]}</div>\n    // </div>\n    // )}\n\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"sources":["/Users/steven/Documents/Coding/Projects/TicTacToe/src/board.js"],"names":["React","Component","Board","props","state","turn","winMessage","board","xWinCount","oWinCount","e","id","target","winningArr","winner","filter","combo","index","array","a","b","c","setState","squares","map","val","playerTurn","bind","restart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass Board extends Component {\n\n\n// instead of X and O, just colored dots. players get to choose what color they want to be at the start.\n// visually, blank spaces would be a small grey dot. once clicked, a space's dot would animate to get bigger and transform to user's chosen color\n\n// play the computer? should be an option... just .random the AI placing in a spot...\n\n// \"best of '?' series\", you can choose best 2 of 3, best of 5, best of 7, 9, 11, etc.\n\n// add \"player 1\" and \"player 2\" areas on the left and right of the game board, have some kind of indicator that highlights whose turn it is (by selecting their side/section and making it glow or something). this section should also record how many total wins each player has. maybe first to 10 wins the game?\n\nconstructor(props){\n  super(props)\n  // need to write method to designate between players turns (X,O)\n  this.state = {\n    turn: 1,\n    winMessage: \"\",\n    //whoseTurn: \"X\",\n    board: [\n      ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '\n    ],\n    xWinCount: 0,\n    oWinCount: 0\n  }\n}\n\n\nplayerTurn(e){\n  let {board, turn, winMessage, xWinCount, oWinCount} = this.state\n\n  //Update board with player position\n  let id = e.target.id\n\n  if (turn > 10){\n    return\n  }\n  if(board[id] === \" \"){\n    turn++\n    if(turn % 2 === 0){\n      board[id] = 'X'\n      // whoseTurn = \"X\"\n    } else {\n      board[id] = 'O'\n      // whoseTurn = \"O\"\n    }\n  }\n\n  //Check for winner\n  //Set up winning possibilities\n  let winningArr = [[0,1,2] , [3,4,5] , [6,7,8] , [0,3,6] , [1,4,7] , [2,5,8] , [0,4,8] , [2,4,6]]\n  //Iterate over winning combinations?\n  let winner = winningArr.filter((combo, index, array )=>{\n\n    let [a, b, c] = combo\n    if ( board[a] === 'X' && board[b] === 'X' && board[c] === 'X' ) {\n      winMessage = \"X is Winner\"\n      turn = turn + 5\n      xWinCount++\n      return combo\n    } else if ( board[a] === 'O' && board[b] === 'O' && board[c] === 'O' ) {\n      winMessage = \"O is Winner\"\n      turn = turn + 5\n      oWinCount++\n      return combo\n      // make the below line call a function, that contains .map and is defined earlier in code\n    } else if ( board[1] !== \" \" && board[2] !== \" \" && board[3] !== \" \" && board[4] !== \" \" && board[5] !== \" \" && board[6] !== \" \" && board[7] !== \" \" && board[8] !== \" \" && board[9] !== \" \" ) {\n      winMessage = \"Stalemate!\"\n    }\n  })\n\n  this.setState({turn: turn, board: board, winMessage: winMessage, xWinCount: xWinCount, oWinCount: oWinCount})\n}\n\nrestart(){\n  this.setState ({\n    turn: 1,\n    winMessage: ' ',\n    board: [\n      ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '\n    ],\n  })\n}\n\nrender() {\n  let {winMessage, xWinCount, oWinCount} = this.state\n  let squares = this.state.board.map((val, index) => {\n\n    return  (\n      <div onClick={this.playerTurn.bind(this)} key={index} id={index} className=\"grid-item\">{val}</div>\n\n    )\n  })\n  return (\n<div>\n    <div className=\"Board\">\n      <div className=\"grid-container\">\n        {squares}\n      </div>\n    </div>\n    <button onClick={this.restart.bind(this)}>Restart</button>\n    <div>X wins: {xWinCount} | O wins:{oWinCount}{winMessage}</div>\n</div>\n  );\n}\n\n\n\n\n\n//create 3x3 grid container with grid items\n\n// <div class=\"grid-container\">\n//   <div onClick={this.playerTurn.bind(this)} id = '0' class=\"grid-item\">{this.state.square[0]}</div>\n//   <div onClick={this.playerTurn.bind(this)} id = '1' class=\"grid- item\">{this.state.square[1]}</div>\n//   <div onClick={this.playerTurn.bind(this)} id = '2' class=\"grid-item\">{this.state.square[2]}</div>\n//   <div onClick={this.playerTurn.bind(this)} id = '3' class=\"grid-item\">{this.state.square[3]}</div>\n//   <div onClick={this.playerTurn.bind(this)} id = '4' class=\"grid-item\">{this.state.square[4]}</div>\n//   <div onClick={this.playerTurn.bind(this)} id = '5' class=\"grid-item\">{this.state.square[5]}</div>\n//   <div onClick={this.playerTurn.bind(this)} id = '6' class=\"grid-item\">{this.state.square[6]}</div>\n//   <div onClick={this.playerTurn.bind(this)} id = '7' class=\"grid-item\">{this.state.square[7]}</div>\n//   <div onClick={this.playerTurn.bind(this)} id = '8' class=\"grid-item\">{this.state.square[8]}</div>\n// </div>\n// )}\n}\n\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}